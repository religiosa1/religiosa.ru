---
import type { MarkdownInstance } from "astro";
import type { MarkdownRecipeMatter } from '$/models/MarkdownRecipeMatter';
import BaseLayout from '$/components/BaseLayout.astro';
import { Breadcrumbs, BreadcrumbsLink } from "$/components/Breadcrumbs";
import Duration from "$/components/Duration.astro";
import Ingredients from "$/components/Ingredients.astro";

interface Props {
  article: MarkdownInstance<MarkdownRecipeMatter>;
  recommended: MarkdownInstance<MarkdownRecipeMatter>[];
}

export async function getStaticPaths() {
  const articles = await Astro.glob<MarkdownRecipeMatter>('../../content/recepies/*.md');
  return articles.map((article) => ({
    params: { slug: article.frontmatter.slug, },
    props: {
      article,
      recommended: article.frontmatter.recommended?.length ?
        article.frontmatter.recommended.map( i => articles.find(j => j.frontmatter.slug === i))
        : [],
    },
  }) );
}

const { article, recommended } = Astro.props as Props;
---

<BaseLayout title={article.frontmatter.title}>
  <h2>{article.frontmatter.title}</h2>
  { article.frontmatter.originalTitle && (
    <i class="original-title">{article.frontmatter.originalTitle}</i>
  )}

  <Breadcrumbs current={article.frontmatter.title}>
    <BreadcrumbsLink to="/">Главная страница</BreadcrumbsLink>
    <BreadcrumbsLink to="/recepies/">Кулинарные рецепты</BreadcrumbsLink>
  </Breadcrumbs>

  <article>

    { article.frontmatter.time && <Duration value={article.frontmatter.time}>Время приготовления</Duration> }
    { article.frontmatter.waiting && <Duration value={article.frontmatter.waiting}>Время ожидания</Duration> }

    { article.frontmatter.ingredients && (<>
      <h3>Ингредиенты</h3>
      { Array.isArray(article.frontmatter.ingredients) ? (
        <Ingredients ingredients={article.frontmatter.ingredients} />
      ) : typeof article.frontmatter.ingredients === "object" ? (
        Object.entries(article.frontmatter.ingredients).map(([ name, ingredients]) => (
          <>
            <h4>{name}</h4>
            <Ingredients ingredients={ingredients} />
          </>
        ))
      ) : null }
    </>)}

    <h3>Инструкции</h3>
    <article.Content />

    { article.frontmatter.sources?.length > 0 && (<>
      <h3>Источники</h3>
      { article.frontmatter.sources.map(source => (
        <a href={source} class="b-link">{source}</a>
      ))}
    </>)}

    { recommended?.length > 0 && (<>
      <h3>Рекомендации</h3>
      { recommended.filter(r => r).map(r => (
        <a href={"/recepies/" + r.frontmatter.slug} class="b-link">{r.frontmatter.title}</a>
      ))}
    </>)}
  </article>
</BaseLayout>

<style>
  .b-link {
    display: block;
    margin: 0 0 0.5rem;
  }
</style>